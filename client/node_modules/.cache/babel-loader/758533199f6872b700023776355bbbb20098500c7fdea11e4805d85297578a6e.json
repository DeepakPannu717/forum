{"ast":null,"code":"var _s = $RefreshSig$();\n// // src/components/AddModal.js\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Modal, Button, Form } from \"react-bootstrap\";\n// import Editor from \"react-simple-code-editor\";\n// import Prism from \"prismjs\";\n// import \"prismjs/themes/prism-tomorrow.css\";\n// import \"prismjs/components/prism-javascript\";\n// import \"prismjs/components/prism-python\";\n\n// export default function AddModal({ type, onAdd, onClose, categories = [] }) {\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     categoryId: \"\",\n//     codebase: \"\",\n//     output: \"\",\n//     status: \"active\",\n//   });\n//   const [language, setLanguage] = useState(\"javascript\");\n//   const [errors, setErrors] = useState({});\n//   const inputRef = useRef(null);\n\n//   useEffect(() => {\n//     if (inputRef.current) inputRef.current.focus();\n//   }, []);\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.name.trim()) newErrors.name = \"Name is required\";\n//     if (type === \"topic\" && !formData.categoryId)\n//       newErrors.categoryId = \"Category is required\";\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const highlightCode = (code) =>\n//     Prism.highlight(code, Prism.languages[language], language);\n\n//   const handleSubmit = () => {\n//     if (!validate()) return;\n//     const payload =\n//       type === \"topic\"\n//         ? {\n//             name: formData.name,\n//             categoryId: formData.categoryId,\n//             codebase: formData.codebase,\n//             output: formData.output,\n//             status: formData.status,\n//             language,\n//           }\n//         : { name: formData.name };\n\n//     onAdd(payload);\n//   };\n\n//   return (\n//     <Modal show onHide={onClose} size=\"lg\" scrollable>\n//       <Modal.Header closeButton>\n//         <Modal.Title>Add {type}</Modal.Title>\n//       </Modal.Header>\n//       <Modal.Body>\n//         <Form>\n//           <Form.Group className=\"mb-3\">\n//             <Form.Label>{type} Name</Form.Label>\n//             <Form.Control\n//               ref={inputRef}\n//               type=\"text\"\n//               name=\"name\"\n//               value={formData.name}\n//               onChange={handleChange}\n//               isInvalid={!!errors.name}\n//               placeholder={`Enter ${type} name`}\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               {errors.name}\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           {type === \"topic\" && (\n//             <>\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Category</Form.Label>\n//                 <Form.Select\n//                   name=\"categoryId\"\n//                   value={formData.categoryId}\n//                   onChange={handleChange}\n//                   isInvalid={!!errors.categoryId}\n//                 >\n//                   <option value=\"\">Select Category</option>\n//                   {categories.map((cat) => (\n//                     <option key={cat._id} value={cat._id}>\n//                       {cat.name}\n//                     </option>\n//                   ))}\n//                 </Form.Select>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.categoryId}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Language</Form.Label>\n//                 <Form.Select\n//                   name=\"language\"\n//                   value={language}\n//                   onChange={(e) => setLanguage(e.target.value)}\n//                 >\n//                   <option value=\"javascript\">JavaScript</option>\n//                   <option value=\"python\">Python</option>\n//                   <option value=\"react\">React</option>\n//                   <option value=\"node\">Node</option>\n//                 </Form.Select>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Codebase</Form.Label>\n//                 <div\n//                   style={{\n//                     border: \"1px solid #ced4da\",\n//                     borderRadius: \"0.25rem\",\n//                     minHeight: \"150px\",\n//                     fontFamily: \"monospace\",\n//                     fontSize: 14,\n//                     padding: \"10px\",\n//                     backgroundColor: \"#2d2d2d\",\n//                     color: \"#ccc\",\n//                   }}\n//                 >\n//                   <Editor\n//                     value={formData.codebase}\n//                     onValueChange={(codebase) =>\n//                       setFormData((prev) => ({ ...prev, codebase }))\n//                     }\n//                     highlight={highlightCode}\n//                     padding={10}\n//                     style={{\n//                       fontFamily: '\"Fira code\", monospace',\n//                       fontSize: 14,\n//                       outline: 0,\n//                       minHeight: 140,\n//                     }}\n//                   />\n//                 </div>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Output</Form.Label>\n//                 <Form.Control\n//                   as=\"textarea\"\n//                   name=\"output\"\n//                   rows={2}\n//                   value={formData.output}\n//                   onChange={handleChange}\n//                 />\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Status</Form.Label>\n//                 <Form.Select\n//                   name=\"status\"\n//                   value={formData.status}\n//                   onChange={handleChange}\n//                 >\n//                   <option value=\"active\">Active</option>\n//                   <option value=\"inactive\">Inactive</option>\n//                 </Form.Select>\n//               </Form.Group>\n//             </>\n//           )}\n//         </Form>\n//       </Modal.Body>\n//       <Modal.Footer>\n//         <Button variant=\"secondary\" onClick={onClose}>\n//           Cancel\n//         </Button>\n//         <Button variant=\"primary\" onClick={handleSubmit}>\n//           Add\n//         </Button>\n//       </Modal.Footer>\n//     </Modal>\n//   );\n// }\n\n// // src/components/AddModal.js\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Modal, Button, Form } from \"react-bootstrap\";\n// import Editor from \"react-simple-code-editor\";\n// import Prism from \"prismjs\";\n// import \"prismjs/themes/prism-tomorrow.css\";\n// import \"prismjs/components/prism-javascript\";\n// import \"prismjs/components/prism-python\";\n\n// // ...existing code...\n// export default function AddModal({ type, onAdd, onClose, categories = [] }) {\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     categoryId: \"\",\n//     subcategoryId: \"\", // <-- add this\n//     codebase: \"\",\n//     output: \"\",\n//     status: \"active\",\n//   });\n//   const [language, setLanguage] = useState(\"javascript\");\n//   const [errors, setErrors] = useState({});\n//   const inputRef = useRef(null);\n\n//   // eslint-disable-next-line react-hooks/exhaustive-deps\n\n//   useEffect(() => {\n//     if (inputRef.current) inputRef.current.focus();\n//   }, []);\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.name.trim()) newErrors.name = \"Name is required\";\n//     if (type === \"topic\" && !formData.categoryId)\n//       newErrors.categoryId = \"Category is required\";\n//     if (type === \"topic\" && !formData.subcategoryId)\n//       newErrors.subcategoryId = \"Subcategory is required\";\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   // const handleChange = (e) => {\n//   //   const { name, value } = e.target;\n//   //   setFormData((prev) => ({ ...prev, [name]: value }));\n//   // };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({ ...prev, [name]: value,\n//       ...(name === \"categoryId\" ? { subcategoryId: \"\" } : {})\n//      }));\n//     };\n\n//     // add this to fix the eslint no-undef for highlightCode\n//   const highlightCode = (code) =>\n//     Prism.highlight(\n//       code || \"\",\n//       // fallback to javascript if the selected language isn't loaded\n//       Prism.languages[language] || Prism.languages.javascript,\n//       language\n//     );\n\n//   // ...existing code...\n\n//   const handleSubmit = () => {\n//     if (!validate()) return;\n//     const payload =\n//       type === \"topic\"\n//         ? {\n//             name: formData.name,\n//             categoryId: formData.categoryId,\n//             subcategoryId: formData.subcategoryId, // <-- add this\n//             codebase: formData.codebase,\n//             output: formData.output,\n//             status: formData.status,\n//             language,\n//           }\n//         : { name: formData.name };\n\n//     onAdd(payload);\n//   };\n\n//   return (\n//     <Modal show onHide={onClose} size=\"lg\" scrollable>\n//       <Modal.Header closeButton>\n//         <Modal.Title>Add {type}</Modal.Title>\n//       </Modal.Header>\n//       <Modal.Body>\n//         <Form>\n//           <Form.Group className=\"mb-3\">\n//             <Form.Label>{type} Name</Form.Label>\n//             <Form.Control\n//               ref={inputRef}\n//               type=\"text\"\n//               name=\"name\"\n//               value={formData.name}\n//               onChange={handleChange}\n//               isInvalid={!!errors.name}\n//               placeholder={`Enter ${type} name`}\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               {errors.name}\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           {type === \"topic\" && (\n//             <>\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Category</Form.Label>\n//                 <Form.Select\n//                   name=\"categoryId\"\n//                   value={formData.categoryId}\n//                   onChange={handleChange}\n//                   isInvalid={!!errors.categoryId}\n//                 >\n//                   <option value=\"\">Select Category</option>\n//                   {categories.map((cat) => (\n//                     <option key={cat._id} value={cat._id}>\n//                       {cat.name}\n//                     </option>\n//                   ))}\n//                 </Form.Select>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.categoryId}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               {/* Subcategory field */}\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Subcategory</Form.Label>\n//                 <Form.Select\n//                   name=\"subcategoryId\"\n//                   value={formData.subcategoryId}\n//                   onChange={handleChange}\n//                   isInvalid={!!errors.subcategoryId}\n//                 >\n//                   <option value=\"\">Select Subcategory</option>\n//                   {categories\n//                     .find((cat) => cat._id === formData.categoryId)?.subcategories?.map((sub) => (\n//                       <option key={sub._id} value={sub._id}>\n//                         {sub.name}\n//                       </option>\n//                     ))}\n//                 </Form.Select>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.subcategoryId}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n//               {/* End subcategory */}\n\n//               {/* ...existing topic fields... */}\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Language</Form.Label>\n//                 <Form.Select\n//                   name=\"language\"\n//                   value={language}\n//                   onChange={(e) => setLanguage(e.target.value)}\n//                 >\n//                   <option value=\"javascript\">JavaScript</option>\n//                   <option value=\"python\">Python</option>\n//                   <option value=\"react\">React</option>\n//                   <option value=\"node\">Node</option>\n//                 </Form.Select>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Codebase</Form.Label>\n//                 <div\n//                   style={{\n//                     border: \"1px solid #ced4da\",\n//                     borderRadius: \"0.25rem\",\n//                     minHeight: \"150px\",\n//                     fontFamily: \"monospace\",\n//                     fontSize: 14,\n//                     padding: \"10px\",\n//                     backgroundColor: \"#2d2d2d\",\n//                     color: \"#ccc\",\n//                   }}\n//                 >\n//                   <Editor\n//                     value={formData.codebase}\n//                     onValueChange={(codebase) =>\n//                       setFormData((prev) => ({ ...prev, codebase }))\n//                     }\n//                     highlight={highlightCode}\n//                     padding={10}\n//                     style={{\n//                       fontFamily: '\"Fira code\", monospace',\n//                       fontSize: 14,\n//                       outline: 0,\n//                       minHeight: 140,\n//                     }}\n//                   />\n//                 </div>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Output</Form.Label>\n//                 <Form.Control\n//                   as=\"textarea\"\n//                   name=\"output\"\n//                   rows={2}\n//                   value={formData.output}\n//                   onChange={handleChange}\n//                 />\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Status</Form.Label>\n//                 <Form.Select\n//                   name=\"status\"\n//                   value={formData.status}\n//                   onChange={handleChange}\n//                 >\n//                   <option value=\"active\">Active</option>\n//                   <option value=\"inactive\">Inactive</option>\n//                 </Form.Select>\n//               </Form.Group>\n//             </>\n//           )}\n//         </Form>\n//       </Modal.Body>\n//       <Modal.Footer>\n//         <Button variant=\"secondary\" onClick={onClose}>\n//           Cancel\n//         </Button>\n//         <Button variant=\"primary\" onClick={handleSubmit}>\n//           Add\n//         </Button>\n//       </Modal.Footer>\n//     </Modal>\n//   );\n// }\n// ...existing code...\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport Editor from \"react-simple-code-editor\";\nimport Prism from \"prismjs\";\nimport \"prismjs/themes/prism-tomorrow.css\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/components/prism-python\";\nexport default function AddModal({\n  type,\n  onAdd,\n  onClose,\n  categories = []\n}) {\n  _s();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    categoryId: \"\",\n    subcategoryId: \"\",\n    codebase: \"\",\n    output: \"\",\n    status: \"active\"\n  });\n  const [language, setLanguage] = useState(\"javascript\");\n  const [errors, setErrors] = useState({});\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, []);\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.name.trim()) newErrors.name = \"Name is required\";\n    if (type === \"topic\") {\n      if (!formData.categoryId) newErrors.categoryId = \"Category is required\";\n      if (!formData.subcategoryId) newErrors.subcategoryId = \"Subcategory is required\";\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value,\n      ...(name === \"categoryId\" ? {\n        subcategoryId: \"\"\n      } : {})\n    }));\n  };\n  const highlightCode = code => Prism.highlight(code || \"\", Prism.languages[language] || Prism.languages.javascript, language);\n  const handleSubmit = () => {\n    if (!validate()) return;\n    const payload = type === \"topic\" ? {\n      name: formData.name,\n      categoryId: formData.categoryId,\n      subcategoryId: formData.subcategoryId,\n      codebase: formData.codebase,\n      output: formData.output,\n      status: formData.status,\n      language\n    } : {\n      name: formData.name\n    };\n    onAdd(payload);\n  };\n\n  // Rest of your component JSX...\n}\n_s(AddModal, \"zS/GNGrFMVnqfQLMVGaoVEE/3c0=\");\n_c = AddModal;\nvar _c;\n$RefreshReg$(_c, \"AddModal\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Modal","Button","Form","Editor","Prism","AddModal","type","onAdd","onClose","categories","_s","formData","setFormData","name","categoryId","subcategoryId","codebase","output","status","language","setLanguage","errors","setErrors","inputRef","current","focus","validate","newErrors","trim","Object","keys","length","handleChange","e","value","target","prev","highlightCode","code","highlight","languages","javascript","handleSubmit","payload","_c","$RefreshReg$"],"sources":["/home/deepak/TECH STACK/PYTHON/forum/client/src/components/AddModal.js"],"sourcesContent":["// // src/components/AddModal.js\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Modal, Button, Form } from \"react-bootstrap\";\n// import Editor from \"react-simple-code-editor\";\n// import Prism from \"prismjs\";\n// import \"prismjs/themes/prism-tomorrow.css\";\n// import \"prismjs/components/prism-javascript\";\n// import \"prismjs/components/prism-python\";\n\n// export default function AddModal({ type, onAdd, onClose, categories = [] }) {\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     categoryId: \"\",\n//     codebase: \"\",\n//     output: \"\",\n//     status: \"active\",\n//   });\n//   const [language, setLanguage] = useState(\"javascript\");\n//   const [errors, setErrors] = useState({});\n//   const inputRef = useRef(null);\n\n//   useEffect(() => {\n//     if (inputRef.current) inputRef.current.focus();\n//   }, []);\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.name.trim()) newErrors.name = \"Name is required\";\n//     if (type === \"topic\" && !formData.categoryId)\n//       newErrors.categoryId = \"Category is required\";\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const highlightCode = (code) =>\n//     Prism.highlight(code, Prism.languages[language], language);\n\n//   const handleSubmit = () => {\n//     if (!validate()) return;\n//     const payload =\n//       type === \"topic\"\n//         ? {\n//             name: formData.name,\n//             categoryId: formData.categoryId,\n//             codebase: formData.codebase,\n//             output: formData.output,\n//             status: formData.status,\n//             language,\n//           }\n//         : { name: formData.name };\n\n//     onAdd(payload);\n//   };\n\n//   return (\n//     <Modal show onHide={onClose} size=\"lg\" scrollable>\n//       <Modal.Header closeButton>\n//         <Modal.Title>Add {type}</Modal.Title>\n//       </Modal.Header>\n//       <Modal.Body>\n//         <Form>\n//           <Form.Group className=\"mb-3\">\n//             <Form.Label>{type} Name</Form.Label>\n//             <Form.Control\n//               ref={inputRef}\n//               type=\"text\"\n//               name=\"name\"\n//               value={formData.name}\n//               onChange={handleChange}\n//               isInvalid={!!errors.name}\n//               placeholder={`Enter ${type} name`}\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               {errors.name}\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           {type === \"topic\" && (\n//             <>\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Category</Form.Label>\n//                 <Form.Select\n//                   name=\"categoryId\"\n//                   value={formData.categoryId}\n//                   onChange={handleChange}\n//                   isInvalid={!!errors.categoryId}\n//                 >\n//                   <option value=\"\">Select Category</option>\n//                   {categories.map((cat) => (\n//                     <option key={cat._id} value={cat._id}>\n//                       {cat.name}\n//                     </option>\n//                   ))}\n//                 </Form.Select>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.categoryId}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Language</Form.Label>\n//                 <Form.Select\n//                   name=\"language\"\n//                   value={language}\n//                   onChange={(e) => setLanguage(e.target.value)}\n//                 >\n//                   <option value=\"javascript\">JavaScript</option>\n//                   <option value=\"python\">Python</option>\n//                   <option value=\"react\">React</option>\n//                   <option value=\"node\">Node</option>\n//                 </Form.Select>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Codebase</Form.Label>\n//                 <div\n//                   style={{\n//                     border: \"1px solid #ced4da\",\n//                     borderRadius: \"0.25rem\",\n//                     minHeight: \"150px\",\n//                     fontFamily: \"monospace\",\n//                     fontSize: 14,\n//                     padding: \"10px\",\n//                     backgroundColor: \"#2d2d2d\",\n//                     color: \"#ccc\",\n//                   }}\n//                 >\n//                   <Editor\n//                     value={formData.codebase}\n//                     onValueChange={(codebase) =>\n//                       setFormData((prev) => ({ ...prev, codebase }))\n//                     }\n//                     highlight={highlightCode}\n//                     padding={10}\n//                     style={{\n//                       fontFamily: '\"Fira code\", monospace',\n//                       fontSize: 14,\n//                       outline: 0,\n//                       minHeight: 140,\n//                     }}\n//                   />\n//                 </div>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Output</Form.Label>\n//                 <Form.Control\n//                   as=\"textarea\"\n//                   name=\"output\"\n//                   rows={2}\n//                   value={formData.output}\n//                   onChange={handleChange}\n//                 />\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Status</Form.Label>\n//                 <Form.Select\n//                   name=\"status\"\n//                   value={formData.status}\n//                   onChange={handleChange}\n//                 >\n//                   <option value=\"active\">Active</option>\n//                   <option value=\"inactive\">Inactive</option>\n//                 </Form.Select>\n//               </Form.Group>\n//             </>\n//           )}\n//         </Form>\n//       </Modal.Body>\n//       <Modal.Footer>\n//         <Button variant=\"secondary\" onClick={onClose}>\n//           Cancel\n//         </Button>\n//         <Button variant=\"primary\" onClick={handleSubmit}>\n//           Add\n//         </Button>\n//       </Modal.Footer>\n//     </Modal>\n//   );\n// }\n\n// // src/components/AddModal.js\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { Modal, Button, Form } from \"react-bootstrap\";\n// import Editor from \"react-simple-code-editor\";\n// import Prism from \"prismjs\";\n// import \"prismjs/themes/prism-tomorrow.css\";\n// import \"prismjs/components/prism-javascript\";\n// import \"prismjs/components/prism-python\";\n\n// // ...existing code...\n// export default function AddModal({ type, onAdd, onClose, categories = [] }) {\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     categoryId: \"\",\n//     subcategoryId: \"\", // <-- add this\n//     codebase: \"\",\n//     output: \"\",\n//     status: \"active\",\n//   });\n//   const [language, setLanguage] = useState(\"javascript\");\n//   const [errors, setErrors] = useState({});\n//   const inputRef = useRef(null);\n\n//   // eslint-disable-next-line react-hooks/exhaustive-deps\n  \n//   useEffect(() => {\n//     if (inputRef.current) inputRef.current.focus();\n//   }, []);\n\n//   const validate = () => {\n//     const newErrors = {};\n//     if (!formData.name.trim()) newErrors.name = \"Name is required\";\n//     if (type === \"topic\" && !formData.categoryId)\n//       newErrors.categoryId = \"Category is required\";\n//     if (type === \"topic\" && !formData.subcategoryId)\n//       newErrors.subcategoryId = \"Subcategory is required\";\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   // const handleChange = (e) => {\n//   //   const { name, value } = e.target;\n//   //   setFormData((prev) => ({ ...prev, [name]: value }));\n//   // };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({ ...prev, [name]: value,\n//       ...(name === \"categoryId\" ? { subcategoryId: \"\" } : {})\n//      }));\n//     };\n\n//     // add this to fix the eslint no-undef for highlightCode\n//   const highlightCode = (code) =>\n//     Prism.highlight(\n//       code || \"\",\n//       // fallback to javascript if the selected language isn't loaded\n//       Prism.languages[language] || Prism.languages.javascript,\n//       language\n//     );\n\n//   // ...existing code...\n\n//   const handleSubmit = () => {\n//     if (!validate()) return;\n//     const payload =\n//       type === \"topic\"\n//         ? {\n//             name: formData.name,\n//             categoryId: formData.categoryId,\n//             subcategoryId: formData.subcategoryId, // <-- add this\n//             codebase: formData.codebase,\n//             output: formData.output,\n//             status: formData.status,\n//             language,\n//           }\n//         : { name: formData.name };\n\n//     onAdd(payload);\n//   };\n\n//   return (\n//     <Modal show onHide={onClose} size=\"lg\" scrollable>\n//       <Modal.Header closeButton>\n//         <Modal.Title>Add {type}</Modal.Title>\n//       </Modal.Header>\n//       <Modal.Body>\n//         <Form>\n//           <Form.Group className=\"mb-3\">\n//             <Form.Label>{type} Name</Form.Label>\n//             <Form.Control\n//               ref={inputRef}\n//               type=\"text\"\n//               name=\"name\"\n//               value={formData.name}\n//               onChange={handleChange}\n//               isInvalid={!!errors.name}\n//               placeholder={`Enter ${type} name`}\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               {errors.name}\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           {type === \"topic\" && (\n//             <>\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Category</Form.Label>\n//                 <Form.Select\n//                   name=\"categoryId\"\n//                   value={formData.categoryId}\n//                   onChange={handleChange}\n//                   isInvalid={!!errors.categoryId}\n//                 >\n//                   <option value=\"\">Select Category</option>\n//                   {categories.map((cat) => (\n//                     <option key={cat._id} value={cat._id}>\n//                       {cat.name}\n//                     </option>\n//                   ))}\n//                 </Form.Select>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.categoryId}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               {/* Subcategory field */}\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Subcategory</Form.Label>\n//                 <Form.Select\n//                   name=\"subcategoryId\"\n//                   value={formData.subcategoryId}\n//                   onChange={handleChange}\n//                   isInvalid={!!errors.subcategoryId}\n//                 >\n//                   <option value=\"\">Select Subcategory</option>\n//                   {categories\n//                     .find((cat) => cat._id === formData.categoryId)?.subcategories?.map((sub) => (\n//                       <option key={sub._id} value={sub._id}>\n//                         {sub.name}\n//                       </option>\n//                     ))}\n//                 </Form.Select>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.subcategoryId}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n//               {/* End subcategory */}\n\n//               {/* ...existing topic fields... */}\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Language</Form.Label>\n//                 <Form.Select\n//                   name=\"language\"\n//                   value={language}\n//                   onChange={(e) => setLanguage(e.target.value)}\n//                 >\n//                   <option value=\"javascript\">JavaScript</option>\n//                   <option value=\"python\">Python</option>\n//                   <option value=\"react\">React</option>\n//                   <option value=\"node\">Node</option>\n//                 </Form.Select>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Codebase</Form.Label>\n//                 <div\n//                   style={{\n//                     border: \"1px solid #ced4da\",\n//                     borderRadius: \"0.25rem\",\n//                     minHeight: \"150px\",\n//                     fontFamily: \"monospace\",\n//                     fontSize: 14,\n//                     padding: \"10px\",\n//                     backgroundColor: \"#2d2d2d\",\n//                     color: \"#ccc\",\n//                   }}\n//                 >\n//                   <Editor\n//                     value={formData.codebase}\n//                     onValueChange={(codebase) =>\n//                       setFormData((prev) => ({ ...prev, codebase }))\n//                     }\n//                     highlight={highlightCode}\n//                     padding={10}\n//                     style={{\n//                       fontFamily: '\"Fira code\", monospace',\n//                       fontSize: 14,\n//                       outline: 0,\n//                       minHeight: 140,\n//                     }}\n//                   />\n//                 </div>\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Output</Form.Label>\n//                 <Form.Control\n//                   as=\"textarea\"\n//                   name=\"output\"\n//                   rows={2}\n//                   value={formData.output}\n//                   onChange={handleChange}\n//                 />\n//               </Form.Group>\n\n//               <Form.Group className=\"mb-3\">\n//                 <Form.Label>Status</Form.Label>\n//                 <Form.Select\n//                   name=\"status\"\n//                   value={formData.status}\n//                   onChange={handleChange}\n//                 >\n//                   <option value=\"active\">Active</option>\n//                   <option value=\"inactive\">Inactive</option>\n//                 </Form.Select>\n//               </Form.Group>\n//             </>\n//           )}\n//         </Form>\n//       </Modal.Body>\n//       <Modal.Footer>\n//         <Button variant=\"secondary\" onClick={onClose}>\n//           Cancel\n//         </Button>\n//         <Button variant=\"primary\" onClick={handleSubmit}>\n//           Add\n//         </Button>\n//       </Modal.Footer>\n//     </Modal>\n//   );\n// }\n// ...existing code...\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport Editor from \"react-simple-code-editor\";\nimport Prism from \"prismjs\";\nimport \"prismjs/themes/prism-tomorrow.css\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/components/prism-python\";\n\nexport default function AddModal({ type, onAdd, onClose, categories = [] }) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    categoryId: \"\",\n    subcategoryId: \"\",\n    codebase: \"\",\n    output: \"\",\n    status: \"active\",\n  });\n  const [language, setLanguage] = useState(\"javascript\");\n  const [errors, setErrors] = useState({});\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, []);\n\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.name.trim()) newErrors.name = \"Name is required\";\n    if (type === \"topic\") {\n      if (!formData.categoryId) newErrors.categoryId = \"Category is required\";\n      if (!formData.subcategoryId) newErrors.subcategoryId = \"Subcategory is required\";\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n      ...(name === \"categoryId\" ? { subcategoryId: \"\" } : {}),\n    }));\n  };\n\n  const highlightCode = (code) =>\n    Prism.highlight(\n      code || \"\",\n      Prism.languages[language] || Prism.languages.javascript,\n      language\n    );\n\n  const handleSubmit = () => {\n    if (!validate()) return;\n    \n    const payload = type === \"topic\"\n      ? {\n          name: formData.name,\n          categoryId: formData.categoryId,\n          subcategoryId: formData.subcategoryId,\n          codebase: formData.codebase,\n          output: formData.output,\n          status: formData.status,\n          language,\n        }\n      : { name: formData.name };\n\n    onAdd(payload);\n  };\n\n  // Rest of your component JSX...\n}"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}